{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"About","text":"<p>A Kotlin Multiplatform client library to interact with the Cashu protocol.</p> <p>This website provides high-level documentation for understanding and leveraging the cashu-client library. You can read our API docs here.</p> <p>The main goals of this library are:  </p> <ul> <li> Cashu protocol-compliant client side<ul> <li> NUT-00</li> <li> NUT-01</li> <li> NUT-02</li> <li> NUT-03</li> <li> NUT-04</li> <li> NUT-05</li> <li> NUT-06</li> <li> NUT-07</li> <li> NUT-08</li> <li> NUT-09</li> </ul> </li> <li> Well tested</li> <li> Well documented</li> <li> Usable in KMP projects (JVM and iOS platforms) </li> </ul>"},{"location":"cashu/","title":"Cashu Protocol","text":"<p>The Cashu protocol defines 3 types of interactions that can happen between a client and a mint, where the client can exchange:</p> <ol> <li>bitcoin for ecash tokens (mint)</li> <li>ecash tokens for bitcoin (melt)</li> <li>ecash tokens for ecash tokens (swap)</li> </ol> <p>The core goal of the <code>cashu-client</code> library is to handle all 3 of those interactions as well as the creation, serialization, and storage of the ecash tokens.</p>"},{"location":"install/","title":"Install and Build Instructions","text":"<p>The library is not available on Maven Central. To use it, you must build and deploy locally.</p> <p>To build the library locally and deploy to your local Maven repository, clone the git repository and run the following command: <pre><code>./gradlew publishToMavenLocal\n</code></pre></p> <p>The library will be available in your local Maven repository (typically at <code>~/.m2/repository/</code> for macOS and Linux systems) under the group ID <code>me.tb</code> and the artifact ID <code>cashu-client</code>. You can import it in your project as you would any other Maven dependency, provided you have your local Maven repository (<code>mavenLocal()</code>) configured as a dependency source: <pre><code>// root-level settings.gradle.kts\ndependencyResolutionManagement {\n    repositories {\n        mavenCentral()\n        mavenLocal()\n    }\n}\n</code></pre></p> <pre><code>// app-level build.gradle.kts\nimplementation(\"me.tb.cashu-client:0.0.1-SNAPSHOT\")\n</code></pre>"},{"location":"melt/","title":"Melt","text":""},{"location":"mint/","title":"Mint","text":""},{"location":"swap/","title":"Swap","text":"<p>The swap operation consists of sending to the mint a list of valid proofs and asking for signatures on a list of blinded messages, presumably to trade certain denominations for others. For example if you own tokens <code>[32, 16, 4, 4, 1]</code> and you want to make a payment for 43 sat, you might request a swap on token <code>[16]</code> and ask for signatures on new tokens <code>[8, 4, 2, 2]</code>, giving you a new token pool of <code>[32, 8, 4, 4, 4, 2, 2, 1]</code>. You can then use <code>[32, 8, 2, 1]</code> to make your 43 sat payment.  </p> <p>The swap operation is always triggered by a requirement for new denominations, but is unlikely to be called directly by the user. Rather, the swap is triggered by the wallet itself when it needs to either build a token or request a melt for which it doesn't have the correct denominations. In its simplest form, the wallet would call a swap because it would need one specific denomination (say you have [32, 16] and you want to make a 36 sat payment, you just need a swap for [4]).  </p> <p>The workflow would be the following:</p> <ol> <li>You need the make a payment for <code>x</code> satoshis, and need to know if you have the right denominations to do so. Call <code>isswapRequired()</code>.</li> <li>If you have enough total balance but don't have the correct denominations to compose into your desired total, you need to swap.</li> <li>You call swap with the new denominations you need, and enough tokens to pay for them.</li> </ol>"}]}